{"version":3,"sources":["services/AuthenticationSvc.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASA;gBAGI,2BAAoB,IAAU,EAAU,MAAc,EAAU,OAAmB;oBAA/D,SAAI,GAAJ,IAAI,CAAM;oBAAU,WAAM,GAAN,MAAM,CAAQ;oBAAU,YAAO,GAAP,OAAO,CAAY;gBAEnF,CAAC;gBAKM,iCAAK,GAAZ,UAAa,WAAwB;oBAAxB,2BAAwB,GAAxB,gBAAwB;oBACjC,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC;oBACjC,IAAI,GAAG,CAAC;oBACR,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBAGnD,IAAI,CAAC;wBACD,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAM,CAAC,KAAK,EAC7B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAC3B,EAAE,SAAA,OAAO,EAAE,CAAC;6BACX,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;6BACjB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAE3B,CAAE;oBAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACX,GAAG,GAAG,eAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;oBAC/B,CAAC;oBAED,MAAM,CAAC,GAAG;yBACL,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3B,CAAC;gBAEM,kCAAM,GAAb;oBACI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;oBAC7B,yBAAyB;gBAC7B,CAAC;gBAEM,uCAAW,GAAlB;oBACI,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAEM,iCAAK,GAAZ;oBACI,MAAM,CAAC,eAAU,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrC,CAAC;gBAEO,mCAAO,GAAf,UAAgB,GAAa;oBACzB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;oBACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,yBAAyB;gBAC7B,CAAC;gBACO,iCAAK,GAAb,UAAc,KAAU;oBAEpB,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBACxC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAC5E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;oBAChD,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC;gBAzDL;oBAAC,iBAAU,EAAE;;qCAAA;gBA0Db,wBAAC;YAAD,CAzDA,AAyDC,IAAA;YAzDD,iDAyDC,CAAA","file":"services/AuthenticationSvc.js","sourcesContent":["// user.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs/Rx';\r\nimport {apiUrl} from '../../app/constants/api-url';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport {Router}    from '@angular/router';\r\nimport { StorageSvc } from '../../app/services/StorageSvc';\r\n\r\n@Injectable()\r\nexport class AuthenticationSvc {\r\n\r\n\r\n    constructor(private http: Http, private router: Router, private storage: StorageSvc) {\r\n       \r\n    }\r\n\r\n\r\n\r\n\r\n    public login(requestData: Object = {}): Observable<boolean> | boolean {\r\n        let router: Router = this.router;\r\n        let obs;\r\n        let headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n\r\n        try {\r\n            obs = this.http.post(apiUrl.login,\r\n                JSON.stringify(requestData),\r\n                { headers })\r\n                .map(this.success)\r\n                .catch(this.error);\r\n\r\n        } catch (err) {\r\n            obs = Observable.of(false);\r\n        }\r\n\r\n        return obs\r\n            .map(this.success);\r\n    }\r\n\r\n    public logout() {\r\n        this.storage.removeStorage();\r\n        //this.isLoggedIn = true;\r\n    }\r\n\r\n    public _isLoggedIn() {\r\n        return true;\r\n    }\r\n\r\n    public check() {\r\n        return Observable.of(this.login);\r\n    }\r\n\r\n    private success(res: Response) {\r\n        let body = res.json();\r\n        console.log(body);\r\n        //return body.data || {};\r\n    }\r\n    private error(error: any) {\r\n\r\n        let errMsg = (error.message) ? error.message :\r\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n        console.error(errMsg); // log to console instead\r\n        return Observable.throw(errMsg);\r\n    }\r\n}"],"sourceRoot":"/source/"}